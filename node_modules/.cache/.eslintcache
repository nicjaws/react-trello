[{"/Users/nicjaws/Documents/GitHub/React/react-trello/src/index.js":"1","/Users/nicjaws/Documents/GitHub/React/react-trello/src/App.js":"2","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Header.js":"3","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Board.js":"4","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Footer.js":"5","/Users/nicjaws/Documents/GitHub/React/react-trello/src/utils.js":"6","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/CardsList.js":"7","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Form.js":"8","/Users/nicjaws/Documents/GitHub/React/react-trello/src/data.js":"9","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Menu.js":"10","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Card.js":"11","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/CardEditor.js":"12","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Button.js":"13","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Popover.js":"14","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Tag.js":"15","/Users/nicjaws/Documents/GitHub/React/react-trello/src/hooks.js":"16"},{"size":168,"mtime":1615847650000,"results":"17","hashOfConfig":"18"},{"size":344,"mtime":1615847650000,"results":"19","hashOfConfig":"18"},{"size":150,"mtime":1615847650000,"results":"20","hashOfConfig":"18"},{"size":7418,"mtime":1615847650000,"results":"21","hashOfConfig":"18"},{"size":282,"mtime":1615847650000,"results":"22","hashOfConfig":"18"},{"size":501,"mtime":1615847650000,"results":"23","hashOfConfig":"18"},{"size":7324,"mtime":1615847650000,"results":"24","hashOfConfig":"18"},{"size":2707,"mtime":1615847650000,"results":"25","hashOfConfig":"18"},{"size":1614,"mtime":1615847650000,"results":"26","hashOfConfig":"18"},{"size":1162,"mtime":1615847650000,"results":"27","hashOfConfig":"18"},{"size":1422,"mtime":1615847650000,"results":"28","hashOfConfig":"18"},{"size":2471,"mtime":1615847650000,"results":"29","hashOfConfig":"18"},{"size":672,"mtime":1615847650000,"results":"30","hashOfConfig":"18"},{"size":1036,"mtime":1615847650000,"results":"31","hashOfConfig":"18"},{"size":454,"mtime":1615847650000,"results":"32","hashOfConfig":"18"},{"size":492,"mtime":1615847650000,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"148vpbu",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nicjaws/Documents/GitHub/React/react-trello/src/index.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/App.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Header.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Board.js",["74","75","76","77","78","79","80","81"],"import React, { Component } from 'react';\nimport { _getNextNumber, _generateId } from '../utils';\n// Icons\nimport { IoMdAdd as AddIcon } from 'react-icons/io';\n// Components\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport CardsList from './CardsList';\nimport Form from './Form';\n\nimport data from '../data';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // Board state\n    this.state = {\n      lists: {},\n      cards: {},\n      listOrder: [],\n      newListText: '',\n      creatingNewList: false,\n      openMenuId: null,\n    };\n\n    // TODO: Bind your class methods here\n    // ...\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to fetch data and init the component state.\n  // Tips:\n  // - Use the `this.setState` method to update the component state\n  componentDidMount() {}\n\n  // TODO: implement the handleAddList method to add a new list to the board.\n  // Tips:\n  // - Check if the list title is not an empty string. Do not create the list otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Add the new list\n  // - Use the `this.setState` method to update the state (lists, listOrder, newListText, creatingNewList)\n  // - Reset the `newListText` and `creatingNewList` state values as well to cleanup and close the form\n  handleAddList(title = '') {}\n\n  // TODO: implement the handleRemoveList method to remove a list from the board.\n  // Tips:\n  // - Delete all cards from the list\n  // - Delete list itself\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder)\n  handleRemoveList(listId) {}\n\n  // TODO: implement the handleAddCard method to add a card to a list.\n  // Tips:\n  // - Check if the card description is not an empty string. Do not create the card otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add the new card\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleAddCard(listId, description = '') {}\n\n  // TODO: implement the handleRemoveCard method to remove a card from a list.\n  // Tips:\n  // - Delete card\n  // - Remove card Id from the corresponding list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleRemoveCard(listId, cardId) {}\n\n  // TODO: implement the handleRemoveAllCards method to remove all cards from a list.\n  // Tips:\n  // - Delete all cards from the corresponding list\n  // - Remove card Ids from the list\n  // - Use the `this.setState` method to update the state (lists, cards, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleRemoveAllCards(listId) {}\n\n  // TODO: implement the handleCopyCard method to copy a card from a list to another.\n  // Tips:\n  // - Create card copy\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add it to the list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleCopyCard(listId, cardId) {}\n\n  // TODO: implement the handleCopyList method to clone an entire list.\n  // Tips:\n  // - Copy all cards from list to clone\n  // - Use the `_generateId` function to generate a unique Id for every cloned cards\n  // - Use the `_getNextNumber` function to get a new card number for every cloned cards\n  // - Create a new list and add all the cloned cards\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Edit the new list title to append '(Copy) - ' to it\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleCopyList(listId) {}\n\n  // TODO: implement the handleMoveAllCards method to move all cards to a list.\n  // Tips:\n  // - Update all the lists\n  // - The target list should get all the cards. The other lists should be emptied\n  // - Use the `this.setState` method to update the state (lists, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleMoveAllCards(listId) {}\n\n  // TODO: implement the handleToggleMenu method to toggle the corresponding list menu.\n  // Tips:\n  // - Use the `this.setState` method to update the state (openMenuId)\n  handleToggleMenu(listId) {}\n\n  // TODO: implement the handleEditCard method to update the card description.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleEditCard(cardId, description = '') {}\n\n  // TODO: implement the handleRemoveTag method to remove a tag from a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleRemoveTag(cardId, tagId) {}\n\n  // TODO: implement the handleAddTag method to add a tag to a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleAddTag(cardId, text = '') {}\n\n  // [BONUS]: implement the handleDragEnd method to persist list and card reordering\n  // Tips:\n  // - Check if the element has been dropped inside the droppable context (using destination). If not, ignore droppping\n  // - Check if the element has been dropped in a new location (using droppableId from destination and source). If not, ignore droppping\n  // - Handle both type of draggable (list and card) by checking the value of type\n  // - Re-order cards inside the list if type equals 'card'. Use the `this.setState` method to update the state (lists)\n  // - Re-order lists inside the board if type equals 'list'. Use the `this.setState` method to update the state (listOrder)\n  handleDragEnd({ destination, source, draggableId, type }) {}\n\n  // TODO: implement the renderLists method to render the board lists UI.\n  // Tips:\n  // - Iterate through the listOrder state array to render each list of cards (CardsList)\n  // - Pass the necessary methods to the CardsList component to handle all actions\n  //\n  // [BONUS]:\n  // - Wrap the board lists inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it\n  // - Add the direction prop to it (should be 'horizontal')\n  // - Add the type prop to it (should be 'list')\n  // - Add the children function that returns your board lists component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n  renderLists() {\n    return (\n      <div className=\"board-lists\">\n        { /* render the lists */ }\n      </div>\n    );\n  }\n\n  // TODO: implement the renderNewList method to render the list creation form.\n  // Tips:\n  // - Render a Form component in creation mode to let the user enter the new list title\n  // - Otherwise, render a button to trigger the creation mode (creatingNewList)\n  renderNewList() {}\n\n  // TODO: render the Board UI.\n  //\n  // [BONUS]:\n  // - Wrap the board inside the <DragDropContext> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/drag-drop-context.md\n  // - Add the onDragEnd prop to the <DragDropContext> component\n  render() {\n    return (\n      <div className=\"board\">\n        { /* render the lists */ }\n        { /* render the list creation form */ }\n      </div>\n    );\n  }\n};\n\nexport default Board;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Footer.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/utils.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/CardsList.js",["82","83","84","85","86","87","88"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Icons\nimport { IoMdAdd as AddIcon } from 'react-icons/io';\n// Components\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Card from './Card';\nimport CardEditor from './CardEditor';\nimport Menu from './Menu';\nimport Form from './Form';\n\n/*\n * TODO: Create the CardsList component\n *\n * Requirements:\n * - Must be named CardsList\n * - Must be a class component\n * - Should render a <div> element as the container for the card\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n * \n * Tips:\n * - You can use the 'card' CSS class for styling\n * \n */ \nclass CardsList extends Component {\n  constructor(props) {\n    super(props);\n\n    // CardsList state\n    this.state = { \n      creatingNewCard: false,\n      editCardId: null,\n      editCardText: '',\n      editCardTags: []\n    };\n\n    // TODO: Define all the card actions here\n    this.actions = [\n      [\n        { \n          title: 'Add Card...',\n          onClick: () => null // TODO\n        },\n        { \n          title: 'Copy List...',\n          onClick: () => null // TODO\n        }\n      ],\n      [\n        {\n          title: 'Move All Cards in This List...',\n          onClick: () => null // TODO\n        },\n        {\n          title: 'Archive All Cards in This List...',\n          onClick: () => null // TODO\n        },\n      ],\n      [\n        {\n          title: 'Archive This List',\n          onClick: () => null // TODO\n        }\n      ]\n    ];\n\n    // TODO: Bind your class methods here\n    // ...\n  }\n\n  // TODO: implement the handleAddNewCard method to add a new card to the list.\n  // Tips:\n  // - Call the `this.props.onAddCard` function to add a new card\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleAddNewCard(cardText = '') {}\n\n  // TODO: implement the handleCancelNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleCancelNewCard() {}\n\n  // TODO: implement the handleCreateNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to open the card creation form\n  handleCreateNewCard() {\n    this.setState({ creatingNewCard: true });\n  }\n\n  // TODO: implement the handleEditCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the text and tags values of the editing from\n  handleEditCard(id, text, tags) {}\n\n  // TODO: implement the handleCancelEdit method.\n  // Tips:\n  // - Use the `this.setState` method to reset and close the editing form\n  handleCancelEdit() {}\n\n  // TODO: implement the handleCopyCard method.\n  // Tips:\n  // - Call the `this.props.onCopyCard` function to clone a card\n  // - Do not forget to reset and close the editing form\n  handleCopyCard() {}\n\n  // TODO: implement the handleArchiveCard method.\n  // Tips:\n  // - Call the `this.props.onRemoveCard` function to remove a card form the list\n  // - Do not forget to reset and close the editing form\n  handleArchiveCard() {}\n\n  // TODO: implement the handleSaveCard method.\n  // Tips:\n  // - Call the `this.props.onEditCard` function to save changes on the card\n  // - Do not forget to reset and close the editing form\n  handleSaveCard(text) {}\n\n  // TODO: implement the handleRemoveTag method.\n  // Tips:\n  // - Call the `this.props.onRemoveTag` function to remove a tag from a card\n  handleRemoveTag(tagId) {}\n\n  // TODO: implement the handleAddTag method.\n  // Tips:\n  // - Call the `this.props.onAddTag` function to add a tag to a card\n  handleAddTag(text) {}\n\n  // TODO: implement the renderHeader method to render the list header UI.\n  // Tips:\n  // - Should render a h3 tag for the list title\n  // - Should render a Menu component\n  // - Should render the number of cards in the list\n  //\n  // [BONUS]:\n  // - Add a drag handle to the list header so that user can grab the list and drag it around\n  // (using the dragHandleProps)\n  renderHeader() {\n    return (\n      <div className=\"cards-list-header\">\n        <div className=\"cards-list-title\">\n          { /* render the list title */ }\n          { /* render the Menu component */ }\n        </div>\n        { /* render the number of cards in this list */ }\n      </div>\n    );\n  }\n\n  // TODO: implement the renderCards method to render the cards.\n  // Tips:\n  // - Iterate through this.props.cards to render each Card\n  //\n  // [BONUS]:\n  // - Wrap the cards inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it (should be the list ID)\n  // - Add the direction prop to it (should be 'vertical')\n  // - Add the type prop to it (should be 'card')\n  // - Add the children function that returns your cards and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n  renderCards() {\n    return (\n      <ol className=\"cards\">\n        { /* render the cards */ }\n      </ol>\n    );\n  }\n\n  // TODO: implement the renderFooter method to render the list footer UI.\n  // Tips:\n  // - Should render either a Form component to create a new card\n  // or a button to trigger the card creation mode (creatingNewCard)\n  renderFooter() {}\n\n  // TODO: render the CardsList UI.\n  //\n  // [BONUS]:\n  // - Wrap the cards list inside the <Draggable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\n  // - Add the draggableId prop to it (should be the list ID)\n  // - Add the index prop to it (should be the list index)\n  // - Add the children function that returns your cards list component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md#children-function-render-props--function-as-child\n  render() {\n    return (\n      <div className=\"cards-list\">\n        { /* render list header */ }\n        { /* render cards */ }\n        { /* render list footer */ }\n        { /* render card editor */ }\n      </div>\n    );\n  }\n};\n\nCardsList.defaultProps = {\n  cards: null,\n  isMenuOpen: false,\n  onToggleMenu: () => null,\n  onAddCard: () => null,\n  onRemoveCard: () => null,\n  onRemoveList: () => null,\n  onRemoveAllCards: () => null,\n  onCopyList: () => null,\n  onMoveAllCards: () => null,\n  onCopyCard: () => null,\n  onEditCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null\n};\n\nCardsList.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n      description: PropTypes.string,\n      tags: PropTypes.arrayOf(PropTypes.string)\n    })\n  ),\n  isMenuOpen: PropTypes.bool,\n  onToggleMenu: PropTypes.func,\n  onAddCard: PropTypes.func,\n  onRemoveCard: PropTypes.func,\n  onRemoveList: PropTypes.func,\n  onRemoveAllCards: PropTypes.func,\n  onCopyList: PropTypes.func,\n  onMoveAllCards: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onEditCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func\n};\n\nexport default CardsList;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Form.js",["89","90"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Icons\nimport { IoMdClose as CancelIcon } from 'react-icons/io';\n// Components\nimport Button from './Button';\n\n/*\n * TODO: Create the Form component\n *\n * Requirements:\n * - Must be named Form\n * - Must be a class component\n * - Should implement all the methods defined below\n * - Should render a form element\n * - Should either render an input or a textarea element\n * - Should render a submit button\n * - Should render a cancel icon (optional)\n * \n * Tips:\n * - You can use the 'form' and 'form-*' CSS classes for styling\n * \n */ \nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    // Refs to access form and control input/textarea DOM nodes\n    this.formRef = React.createRef();\n    this.controlRef = React.createRef();\n\n    // TODO: Define your state properties here\n    this.state = {}\n\n    // TODO: Bind your class methods here\n    // ...\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to set focus on the form control element.\n  // Tips:\n  // - Call the `focus` method on the control ref node `this.controlRef.current`\n  componentDidMount() {}\n\n  // TODO: implement the handleOnChangeText event handler.\n  // Tips:\n  // - Use the `this.setState` method to update the text value of the control from\n  handleOnChangeText(event) {}\n\n  // TODO: implement the handleOnSubmit event handler.\n  // Tips:\n  // - Use the `preventDefault` method to prevent the default action\n  // - Call the `this.props.onClickSubmit` method to submit the text\n  // - Clean up the control form value using `this.setState`\n  handleOnSubmit(event) {}\n\n  // TODO: implement the handleOnKeyDown event handler.\n  // Tips:\n  // - Use the `key` attribute from the event to check if the user has pressed \"Enter\" on the keyboard\n  // - Call the `this.handleOnSubmit` if the user pressed \"Enter\"\n  handleOnKeyDown(event) {}\n\n  // TODO: render the Form UI.\n  render() {\n    return (\n      <form\n        ref={this.formRef}\n        className={`form form-${this.props.type}`}\n      >\n        { /* render form control: input or textarea */ } \n        <div className=\"form-actions\">\n          { /* render submit button */ }\n          { /* render cancel icon */ }\n        </div>\n      </form>\n    );\n  }\n};\n\nForm.defaultProps = {\n  initialValue: '',\n  placeholder: '',\n  buttonText: '',\n  onClickSubmit: () => null,\n  onClickCancel: () => null\n};\n\nForm.propTypes = {\n  type: PropTypes.oneOf(['list', 'card', 'editor']).isRequired,\n  initialValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  buttonText: PropTypes.string,\n  onClickSubmit: PropTypes.func,\n  onClickCancel: PropTypes.func\n};\n\nexport default Form;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/data.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Menu.js",["91","92"],"import React from 'react';\nimport PropTypes from 'prop-types';\n// Icons\nimport { IoIosMore as MenuIcon } from 'react-icons/io';\n// Components\nimport Popover from './Popover';\n\n/*\n * TODO: Create the Menu component\n *\n * Requirements:\n * - Must be named Menu\n * - Must be a function component\n * - Should render a <div> element as the container for the menu content\n * - Should render an icon the user can click to open/close the menu\n * - Should render the lists of actions inside a Popover component if the menu is open\n * - The Popover component should be mounted only if the menu is open\n * - Each list of actions should be separated by an horizontal line (use a <hr> element)\n * \n * Tips:\n * - You can use the 'menu' CSS class for styling\n * \n */ \nconst Menu = (props) => (\n  <div className=\"menu\">\n    { /* render the menu icon */ }\n    { /* render the lists of actions */ }\n  </div>\n);\n\nMenu.propTypes = {\n  isOpen: PropTypes.bool,\n  onClick: PropTypes.func,\n  actions: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        onClick: PropTypes.func,\n        title: PropTypes.string.isRequired\n      })\n    )\n  )\n};\n\nexport default Menu;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Card.js",["93","94"],"import React from 'react';\nimport PropTypes from 'prop-types';\n// Components\nimport { Draggable } from 'react-beautiful-dnd';\nimport Tag from './Tag';\n\n/*\n * TODO: Create the Card component\n *\n * Requirements:\n * - Must be named Card\n * - Must be a function component\n * - Should render a <div> element as the container for the card content\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n * \n * Tips:\n * - You can use the 'card' CSS class for styling\n *\n * [BONUS]:\n * - Wrap the card inside the <Draggable> component\n * --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\n * - Add the draggableId prop to it (should be the card ID)\n * - Add the index prop to it (should be the card index)\n * - Add the children function that returns your card component and bind everything together\n * --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md#children-function-render-props--function-as-child\n */\nconst Card = (props) => (\n  <div className=\"card\">\n    { /* render tags list */ }\n    { /* render card number and description */ }\n  </div>\n);\n\nCard.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  number: PropTypes.number.isRequired,\n  description: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default Card;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/CardEditor.js",["95","96","97","98","99","100","101","102"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Icons\nimport { \n  IoMdCopy as CopyIcon, \n  IoMdArchive as ArchiveIcon,\n  IoMdCreate as EditIcon,\n  IoMdClose as RemoveIcon  \n} from 'react-icons/io';\n// Components\nimport Button from './Button';\nimport Form from './Form';\nimport Popover from './Popover';\nimport Tag from './Tag';\n\n/*\n * TODO: Create the CardEditor component\n *\n * Requirements:\n * - Must be named CardEditor\n * - Must be a class component\n * - Should render a Form component to edit the card description (that contain a textarea and a submit button)\n * - Should render a list of buttons for all editing actions (edit labels, copy, archive)\n * - Should render a Popover component for displaying the label editing form:\n *    - Should render the list of tags\n *    - Should render an icon next to each tag to let the user remove each tag individually\n *    - Should render a Form component to add a new tag (that contain an input and a submit button)\n * \n * Tips:\n * - You can use the 'editor-modal' and 'editor-actions' CSS classes for styling\n * \n */ \nclass CardEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    // TODO: Define your state properties here\n    this.state = {}\n  }\n\n  // TODO: render the CardEditor UI.\n  render() {\n    return (\n      <div className=\"editor-modal\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            position: \"absolute\",\n            top: `${this.props?.position?.top ?? 0}px`,\n            left: `${this.props?.position?.left ?? 0}px`\n          }}\n        >\n          <div>\n            { /* render editor form */ }\n          </div>\n          <ul className=\"editor-actions\">\n            { /* render editor actions */ }\n            { /* render tags editing form */ }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nCardEditor.defaultProps = {\n  initialValue: '',\n  tags: [],\n  position: null,\n  onSaveCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null,\n  onCopyCard: () => null,\n  onArchiveCard: () => null\n};\n\nCardEditor.propTypes = {\n  initialValue: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  position: PropTypes.exact({\n    top: PropTypes.number,\n    left: PropTypes.number\n  }),\n  onSaveCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onArchiveCard: PropTypes.func\n};\n\nexport default CardEditor;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Button.js",["103"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/*\n * TODO: Create the Button component\n *\n * Requirements:\n * - Must be named Button\n * - Must be a function component\n * - Should render a <button> element\n * - Should render a <span> element inside the <button> for the text\n * - Should render an optional icon (from react-icons) before the text\n * \n * Tips:\n * - You can use the 'btn' and 'btn-success' CSS classes for styling\n * \n */ \nconst Button = (props) => null;\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  icon: PropTypes.node,\n  onClick: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'editor'])\n};\n\nexport default Button;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Popover.js",[],"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Tag.js",["104"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/*\n * TODO: Create the Tag component\n *\n * Requirements:\n * - Must be named Tag\n * - Must be a function component\n * - Should render a <span> element with the text\n * - Should return null if no text is provided\n * \n * Tips:\n * - You can use the 'tag' CSS class for styling\n * \n */ \nconst Tag = (props) => null;\n\nTag.propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nexport default Tag;\n","/Users/nicjaws/Documents/GitHub/React/react-trello/src/hooks.js",[],{"ruleId":"105","severity":1,"message":"106","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":24},{"ruleId":"105","severity":1,"message":"109","line":2,"column":26,"nodeType":"107","messageId":"108","endLine":2,"endColumn":37},{"ruleId":"105","severity":1,"message":"110","line":4,"column":21,"nodeType":"107","messageId":"108","endLine":4,"endColumn":28},{"ruleId":"105","severity":1,"message":"111","line":6,"column":10,"nodeType":"107","messageId":"108","endLine":6,"endColumn":25},{"ruleId":"105","severity":1,"message":"112","line":6,"column":27,"nodeType":"107","messageId":"108","endLine":6,"endColumn":36},{"ruleId":"105","severity":1,"message":"113","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":17},{"ruleId":"105","severity":1,"message":"114","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":12},{"ruleId":"105","severity":1,"message":"115","line":10,"column":8,"nodeType":"107","messageId":"108","endLine":10,"endColumn":12},{"ruleId":"105","severity":1,"message":"110","line":4,"column":21,"nodeType":"107","messageId":"108","endLine":4,"endColumn":28},{"ruleId":"105","severity":1,"message":"112","line":6,"column":10,"nodeType":"107","messageId":"108","endLine":6,"endColumn":19},{"ruleId":"105","severity":1,"message":"116","line":6,"column":21,"nodeType":"107","messageId":"108","endLine":6,"endColumn":30},{"ruleId":"105","severity":1,"message":"117","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":12},{"ruleId":"105","severity":1,"message":"118","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":18},{"ruleId":"105","severity":1,"message":"119","line":9,"column":8,"nodeType":"107","messageId":"108","endLine":9,"endColumn":12},{"ruleId":"105","severity":1,"message":"114","line":10,"column":8,"nodeType":"107","messageId":"108","endLine":10,"endColumn":12},{"ruleId":"105","severity":1,"message":"120","line":4,"column":23,"nodeType":"107","messageId":"108","endLine":4,"endColumn":33},{"ruleId":"105","severity":1,"message":"121","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":14},{"ruleId":"105","severity":1,"message":"122","line":4,"column":23,"nodeType":"107","messageId":"108","endLine":4,"endColumn":31},{"ruleId":"105","severity":1,"message":"123","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":15},{"ruleId":"105","severity":1,"message":"116","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":19},{"ruleId":"105","severity":1,"message":"124","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":11},{"ruleId":"105","severity":1,"message":"125","line":5,"column":15,"nodeType":"107","messageId":"108","endLine":5,"endColumn":23},{"ruleId":"105","severity":1,"message":"126","line":6,"column":18,"nodeType":"107","messageId":"108","endLine":6,"endColumn":29},{"ruleId":"105","severity":1,"message":"127","line":7,"column":17,"nodeType":"107","messageId":"108","endLine":7,"endColumn":25},{"ruleId":"105","severity":1,"message":"128","line":8,"column":16,"nodeType":"107","messageId":"108","endLine":8,"endColumn":26},{"ruleId":"105","severity":1,"message":"121","line":11,"column":8,"nodeType":"107","messageId":"108","endLine":11,"endColumn":14},{"ruleId":"105","severity":1,"message":"114","line":12,"column":8,"nodeType":"107","messageId":"108","endLine":12,"endColumn":12},{"ruleId":"105","severity":1,"message":"123","line":13,"column":8,"nodeType":"107","messageId":"108","endLine":13,"endColumn":15},{"ruleId":"105","severity":1,"message":"124","line":14,"column":8,"nodeType":"107","messageId":"108","endLine":14,"endColumn":11},{"ruleId":"105","severity":1,"message":"129","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":13},{"ruleId":"105","severity":1,"message":"129","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":13},"no-unused-vars","'_getNextNumber' is defined but never used.","Identifier","unusedVar","'_generateId' is defined but never used.","'AddIcon' is defined but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'CardsList' is defined but never used.","'Form' is defined but never used.","'data' is defined but never used.","'Draggable' is defined but never used.","'Card' is defined but never used.","'CardEditor' is defined but never used.","'Menu' is defined but never used.","'CancelIcon' is defined but never used.","'Button' is defined but never used.","'MenuIcon' is defined but never used.","'Popover' is defined but never used.","'Tag' is defined but never used.","'CopyIcon' is defined but never used.","'ArchiveIcon' is defined but never used.","'EditIcon' is defined but never used.","'RemoveIcon' is defined but never used.","'React' is defined but never used."]