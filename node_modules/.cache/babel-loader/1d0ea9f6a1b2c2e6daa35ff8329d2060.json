{"ast":null,"code":"var _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/CardsList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // Icons\n\nimport { IoMdAdd as AddIcon } from 'react-icons/io'; // Components\n\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Card from './Card';\nimport CardEditor from './CardEditor';\nimport Menu from './Menu';\nimport Form from './Form';\n/*\n * TODO: Create the CardsList component\n *\n * Requirements:\n * - Must be named CardsList\n * - Must be a class component\n * - Should render a <div> element as the container for the card\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n * \n * Tips:\n * - You can use the 'card' CSS class for styling\n * \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CardsList extends Component {\n  constructor(props) {\n    super(props); // CardsList state\n\n    this.state = {\n      creatingNewCard: false,\n      editCardId: null,\n      editCardText: '',\n      editCardTags: []\n    }; // TODO: Define all the card actions here\n\n    this.actions = [[{\n      title: 'Add Card...',\n      onClick: () => null // TODO\n\n    }, {\n      title: 'Copy List...',\n      onClick: () => null // TODO\n\n    }], [{\n      title: 'Move All Cards in This List...',\n      onClick: () => null // TODO\n\n    }, {\n      title: 'Archive All Cards in This List...',\n      onClick: () => null // TODO\n\n    }], [{\n      title: 'Archive This List',\n      onClick: () => null // TODO\n\n    }]]; // TODO: Bind your class methods here\n    // ...\n  } // TODO: implement the handleAddNewCard method to add a new card to the list.\n  // Tips:\n  // - Call the `this.props.onAddCard` function to add a new card\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n\n\n  handleAddNewCard(cardText = '') {} // TODO: implement the handleCancelNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n\n\n  handleCancelNewCard() {} // TODO: implement the handleCreateNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to open the card creation form\n\n\n  handleCreateNewCard() {\n    this.setState({\n      creatingNewCard: true\n    });\n  } // TODO: implement the handleEditCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the text and tags values of the editing from\n\n\n  handleEditCard(id, text, tags) {} // TODO: implement the handleCancelEdit method.\n  // Tips:\n  // - Use the `this.setState` method to reset and close the editing form\n\n\n  handleCancelEdit() {} // TODO: implement the handleCopyCard method.\n  // Tips:\n  // - Call the `this.props.onCopyCard` function to clone a card\n  // - Do not forget to reset and close the editing form\n\n\n  handleCopyCard() {} // TODO: implement the handleArchiveCard method.\n  // Tips:\n  // - Call the `this.props.onRemoveCard` function to remove a card form the list\n  // - Do not forget to reset and close the editing form\n\n\n  handleArchiveCard() {} // TODO: implement the handleSaveCard method.\n  // Tips:\n  // - Call the `this.props.onEditCard` function to save changes on the card\n  // - Do not forget to reset and close the editing form\n\n\n  handleSaveCard(text) {} // TODO: implement the handleRemoveTag method.\n  // Tips:\n  // - Call the `this.props.onRemoveTag` function to remove a tag from a card\n\n\n  handleRemoveTag(tagId) {} // TODO: implement the handleAddTag method.\n  // Tips:\n  // - Call the `this.props.onAddTag` function to add a tag to a card\n\n\n  handleAddTag(text) {} // TODO: implement the renderHeader method to render the list header UI.\n  // Tips:\n  // - Should render a h3 tag for the list title\n  // - Should render a Menu component\n  // - Should render the number of cards in the list\n  //\n  // [BONUS]:\n  // - Add a drag handle to the list header so that user can grab the list and drag it around\n  // (using the dragHandleProps)\n\n\n  renderHeader() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-list-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards-list-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  } // TODO: implement the renderCards method to render the cards.\n  // Tips:\n  // - Iterate through this.props.cards to render each Card\n  //\n  // [BONUS]:\n  // - Wrap the cards inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it (should be the list ID)\n  // - Add the direction prop to it (should be 'vertical')\n  // - Add the type prop to it (should be 'card')\n  // - Add the children function that returns your cards and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n\n\n  renderCards() {\n    return /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this);\n  } // TODO: implement the renderFooter method to render the list footer UI.\n  // Tips:\n  // - Should render either a Form component to create a new card\n  // or a button to trigger the card creation mode (creatingNewCard)\n\n\n  renderFooter() {} // TODO: render the CardsList UI.\n  //\n  // [BONUS]:\n  // - Wrap the cards list inside the <Draggable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\n  // - Add the draggableId prop to it (should be the list ID)\n  // - Add the index prop to it (should be the list index)\n  // - Add the children function that returns your cards list component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md#children-function-render-props--function-as-child\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nCardsList.defaultProps = {\n  cards: null,\n  isMenuOpen: false,\n  onToggleMenu: () => null,\n  onAddCard: () => null,\n  onRemoveCard: () => null,\n  onRemoveList: () => null,\n  onRemoveAllCards: () => null,\n  onCopyList: () => null,\n  onMoveAllCards: () => null,\n  onCopyCard: () => null,\n  onEditCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null\n};\nCardsList.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n    description: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string)\n  })),\n  isMenuOpen: PropTypes.bool,\n  onToggleMenu: PropTypes.func,\n  onAddCard: PropTypes.func,\n  onRemoveCard: PropTypes.func,\n  onRemoveList: PropTypes.func,\n  onRemoveAllCards: PropTypes.func,\n  onCopyList: PropTypes.func,\n  onMoveAllCards: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onEditCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func\n};\nexport default CardsList;","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/CardsList.js"],"names":["React","Component","PropTypes","IoMdAdd","AddIcon","Droppable","Draggable","Card","CardEditor","Menu","Form","CardsList","constructor","props","state","creatingNewCard","editCardId","editCardText","editCardTags","actions","title","onClick","handleAddNewCard","cardText","handleCancelNewCard","handleCreateNewCard","setState","handleEditCard","id","text","tags","handleCancelEdit","handleCopyCard","handleArchiveCard","handleSaveCard","handleRemoveTag","tagId","handleAddTag","renderHeader","renderCards","renderFooter","render","defaultProps","cards","isMenuOpen","onToggleMenu","onAddCard","onRemoveCard","onRemoveList","onRemoveAllCards","onCopyList","onMoveAllCards","onCopyCard","onEditCard","onRemoveTag","onAddTag","propTypes","string","isRequired","index","number","arrayOf","exact","description","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Icons\nimport { IoMdAdd as AddIcon } from 'react-icons/io';\n// Components\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Card from './Card';\nimport CardEditor from './CardEditor';\nimport Menu from './Menu';\nimport Form from './Form';\n\n/*\n * TODO: Create the CardsList component\n *\n * Requirements:\n * - Must be named CardsList\n * - Must be a class component\n * - Should render a <div> element as the container for the card\n * - Should render the tags list at the top of the card content\n * - Should render the card number and description below the tags\n * \n * Tips:\n * - You can use the 'card' CSS class for styling\n * \n */ \nclass CardsList extends Component {\n  constructor(props) {\n    super(props);\n\n    // CardsList state\n    this.state = { \n      creatingNewCard: false,\n      editCardId: null,\n      editCardText: '',\n      editCardTags: []\n    };\n\n    // TODO: Define all the card actions here\n    this.actions = [\n      [\n        { \n          title: 'Add Card...',\n          onClick: () => null // TODO\n        },\n        { \n          title: 'Copy List...',\n          onClick: () => null // TODO\n        }\n      ],\n      [\n        {\n          title: 'Move All Cards in This List...',\n          onClick: () => null // TODO\n        },\n        {\n          title: 'Archive All Cards in This List...',\n          onClick: () => null // TODO\n        },\n      ],\n      [\n        {\n          title: 'Archive This List',\n          onClick: () => null // TODO\n        }\n      ]\n    ];\n\n    // TODO: Bind your class methods here\n    // ...\n  }\n\n  // TODO: implement the handleAddNewCard method to add a new card to the list.\n  // Tips:\n  // - Call the `this.props.onAddCard` function to add a new card\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleAddNewCard(cardText = '') {}\n\n  // TODO: implement the handleCancelNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to close the card creation form\n  handleCancelNewCard() {}\n\n  // TODO: implement the handleCreateNewCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the state in order to open the card creation form\n  handleCreateNewCard() {\n    this.setState({ creatingNewCard: true });\n  }\n\n  // TODO: implement the handleEditCard method.\n  // Tips:\n  // - Use the `this.setState` method to update the text and tags values of the editing from\n  handleEditCard(id, text, tags) {}\n\n  // TODO: implement the handleCancelEdit method.\n  // Tips:\n  // - Use the `this.setState` method to reset and close the editing form\n  handleCancelEdit() {}\n\n  // TODO: implement the handleCopyCard method.\n  // Tips:\n  // - Call the `this.props.onCopyCard` function to clone a card\n  // - Do not forget to reset and close the editing form\n  handleCopyCard() {}\n\n  // TODO: implement the handleArchiveCard method.\n  // Tips:\n  // - Call the `this.props.onRemoveCard` function to remove a card form the list\n  // - Do not forget to reset and close the editing form\n  handleArchiveCard() {}\n\n  // TODO: implement the handleSaveCard method.\n  // Tips:\n  // - Call the `this.props.onEditCard` function to save changes on the card\n  // - Do not forget to reset and close the editing form\n  handleSaveCard(text) {}\n\n  // TODO: implement the handleRemoveTag method.\n  // Tips:\n  // - Call the `this.props.onRemoveTag` function to remove a tag from a card\n  handleRemoveTag(tagId) {}\n\n  // TODO: implement the handleAddTag method.\n  // Tips:\n  // - Call the `this.props.onAddTag` function to add a tag to a card\n  handleAddTag(text) {}\n\n  // TODO: implement the renderHeader method to render the list header UI.\n  // Tips:\n  // - Should render a h3 tag for the list title\n  // - Should render a Menu component\n  // - Should render the number of cards in the list\n  //\n  // [BONUS]:\n  // - Add a drag handle to the list header so that user can grab the list and drag it around\n  // (using the dragHandleProps)\n  renderHeader() {\n    return (\n      <div className=\"cards-list-header\">\n        <div className=\"cards-list-title\">\n          { /* render the list title */ }\n          { /* render the Menu component */ }\n        </div>\n        { /* render the number of cards in this list */ }\n      </div>\n    );\n  }\n\n  // TODO: implement the renderCards method to render the cards.\n  // Tips:\n  // - Iterate through this.props.cards to render each Card\n  //\n  // [BONUS]:\n  // - Wrap the cards inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it (should be the list ID)\n  // - Add the direction prop to it (should be 'vertical')\n  // - Add the type prop to it (should be 'card')\n  // - Add the children function that returns your cards and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n  renderCards() {\n    return (\n      <ol className=\"cards\">\n        { /* render the cards */ }\n      </ol>\n    );\n  }\n\n  // TODO: implement the renderFooter method to render the list footer UI.\n  // Tips:\n  // - Should render either a Form component to create a new card\n  // or a button to trigger the card creation mode (creatingNewCard)\n  renderFooter() {}\n\n  // TODO: render the CardsList UI.\n  //\n  // [BONUS]:\n  // - Wrap the cards list inside the <Draggable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md\n  // - Add the draggableId prop to it (should be the list ID)\n  // - Add the index prop to it (should be the list index)\n  // - Add the children function that returns your cards list component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/draggable.md#children-function-render-props--function-as-child\n  render() {\n    return (\n      <div className=\"cards-list\">\n        { /* render list header */ }\n        { /* render cards */ }\n        { /* render list footer */ }\n        { /* render card editor */ }\n      </div>\n    );\n  }\n};\n\nCardsList.defaultProps = {\n  cards: null,\n  isMenuOpen: false,\n  onToggleMenu: () => null,\n  onAddCard: () => null,\n  onRemoveCard: () => null,\n  onRemoveList: () => null,\n  onRemoveAllCards: () => null,\n  onCopyList: () => null,\n  onMoveAllCards: () => null,\n  onCopyCard: () => null,\n  onEditCard: () => null,\n  onRemoveTag: () => null,\n  onAddTag: () => null\n};\n\nCardsList.propTypes = {\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  cards: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n      description: PropTypes.string,\n      tags: PropTypes.arrayOf(PropTypes.string)\n    })\n  ),\n  isMenuOpen: PropTypes.bool,\n  onToggleMenu: PropTypes.func,\n  onAddCard: PropTypes.func,\n  onRemoveCard: PropTypes.func,\n  onRemoveList: PropTypes.func,\n  onRemoveAllCards: PropTypes.func,\n  onCopyList: PropTypes.func,\n  onMoveAllCards: PropTypes.func,\n  onCopyCard: PropTypes.func,\n  onEditCard: PropTypes.func,\n  onRemoveTag: PropTypes.func,\n  onAddTag: PropTypes.func\n};\n\nexport default CardsList;\n"]},"metadata":{},"sourceType":"module"}