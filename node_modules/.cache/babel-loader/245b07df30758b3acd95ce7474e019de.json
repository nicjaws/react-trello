{"ast":null,"code":"var _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport { _getNextNumber, _generateId } from '../utils'; // Icons\n\nimport { IoMdAdd as AddIcon } from 'react-icons/io'; // Components\n\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport CardsList from './CardsList';\nimport Form from './Form';\nimport data from '../data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // Board state\n\n    this.state = {\n      lists: {},\n      cards: {},\n      listOrder: [],\n      newListText: '',\n      creatingNewList: false,\n      openMenuId: null\n    }; // TODO: Bind your class methods here\n    // ...\n  } // TODO: implement the componentDidMount lifecycle method to fetch data and init the component state.\n  // Tips:\n  // - Use the `this.setState` method to update the component state\n\n\n  componentDidMount() {} // TODO: implement the handleAddList method to add a new list to the board.\n  // Tips:\n  // - Check if the list title is not an empty string. Do not create the list otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Add the new list\n  // - Use the `this.setState` method to update the state (lists, listOrder, newListText, creatingNewList)\n  // - Reset the `newListText` and `creatingNewList` state values as well to cleanup and close the form\n\n\n  handleAddList(title = '') {} // TODO: implement the handleRemoveList method to remove a list from the board.\n  // Tips:\n  // - Delete all cards from the list\n  // - Delete list itself\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder)\n\n\n  handleRemoveList(listId) {} // TODO: implement the handleAddCard method to add a card to a list.\n  // Tips:\n  // - Check if the card description is not an empty string. Do not create the card otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add the new card\n  // - Use the `this.setState` method to update the state (lists, cards)\n\n\n  handleAddCard(listId, description = '') {} // TODO: implement the handleRemoveCard method to remove a card from a list.\n  // Tips:\n  // - Delete card\n  // - Remove card Id from the corresponding list\n  // - Use the `this.setState` method to update the state (lists, cards)\n\n\n  handleRemoveCard(listId, cardId) {} // TODO: implement the handleRemoveAllCards method to remove all cards from a list.\n  // Tips:\n  // - Delete all cards from the corresponding list\n  // - Remove card Ids from the list\n  // - Use the `this.setState` method to update the state (lists, cards, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n\n\n  handleRemoveAllCards(listId) {} // TODO: implement the handleCopyCard method to copy a card from a list to another.\n  // Tips:\n  // - Create card copy\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add it to the list\n  // - Use the `this.setState` method to update the state (lists, cards)\n\n\n  handleCopyCard(listId, cardId) {} // TODO: implement the handleCopyList method to clone an entire list.\n  // Tips:\n  // - Copy all cards from list to clone\n  // - Use the `_generateId` function to generate a unique Id for every cloned cards\n  // - Use the `_getNextNumber` function to get a new card number for every cloned cards\n  // - Create a new list and add all the cloned cards\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Edit the new list title to append '(Copy) - ' to it\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n\n\n  handleCopyList(listId) {} // TODO: implement the handleMoveAllCards method to move all cards to a list.\n  // Tips:\n  // - Update all the lists\n  // - The target list should get all the cards. The other lists should be emptied\n  // - Use the `this.setState` method to update the state (lists, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n\n\n  handleMoveAllCards(listId) {} // TODO: implement the handleToggleMenu method to toggle the corresponding list menu.\n  // Tips:\n  // - Use the `this.setState` method to update the state (openMenuId)\n\n\n  handleToggleMenu(listId) {} // TODO: implement the handleEditCard method to update the card description.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n\n\n  handleEditCard(cardId, description = '') {} // TODO: implement the handleRemoveTag method to remove a tag from a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n\n\n  handleRemoveTag(cardId, tagId) {} // TODO: implement the handleAddTag method to add a tag to a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n\n\n  handleAddTag(cardId, text = '') {} // [BONUS]: implement the handleDragEnd method to persist list and card reordering\n  // Tips:\n  // - Check if the element has been dropped inside the droppable context (using destination). If not, ignore droppping\n  // - Check if the element has been dropped in a new location (using droppableId from destination and source). If not, ignore droppping\n  // - Handle both type of draggable (list and card) by checking the value of type\n  // - Re-order cards inside the list if type equals 'card'. Use the `this.setState` method to update the state (lists)\n  // - Re-order lists inside the board if type equals 'list'. Use the `this.setState` method to update the state (listOrder)\n\n\n  handleDragEnd({\n    destination,\n    source,\n    draggableId,\n    type\n  }) {} // TODO: implement the renderLists method to render the board lists UI.\n  // Tips:\n  // - Iterate through the listOrder state array to render each list of cards (CardsList)\n  // - Pass the necessary methods to the CardsList component to handle all actions\n  //\n  // [BONUS]:\n  // - Wrap the board lists inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it\n  // - Add the direction prop to it (should be 'horizontal')\n  // - Add the type prop to it (should be 'list')\n  // - Add the children function that returns your board lists component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n\n\n  renderLists() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-lists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  } // TODO: implement the renderNewList method to render the list creation form.\n  // Tips:\n  // - Render a Form component in creation mode to let the user enter the new list title\n  // - Otherwise, render a button to trigger the creation mode (creatingNewList)\n\n\n  renderNewList() {} // TODO: render the Board UI.\n  //\n  // [BONUS]:\n  // - Wrap the board inside the <DragDropContext> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/drag-drop-context.md\n  // - Add the onDragEnd prop to the <DragDropContext> component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default Board;","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Board.js"],"names":["React","Component","_getNextNumber","_generateId","IoMdAdd","AddIcon","DragDropContext","Droppable","CardsList","Form","data","Board","constructor","props","state","lists","cards","listOrder","newListText","creatingNewList","openMenuId","componentDidMount","handleAddList","title","handleRemoveList","listId","handleAddCard","description","handleRemoveCard","cardId","handleRemoveAllCards","handleCopyCard","handleCopyList","handleMoveAllCards","handleToggleMenu","handleEditCard","handleRemoveTag","tagId","handleAddTag","text","handleDragEnd","destination","source","draggableId","type","renderLists","renderNewList","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { _getNextNumber, _generateId } from '../utils';\n// Icons\nimport { IoMdAdd as AddIcon } from 'react-icons/io';\n// Components\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport CardsList from './CardsList';\nimport Form from './Form';\n\nimport data from '../data';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // Board state\n    this.state = {\n      lists: {},\n      cards: {},\n      listOrder: [],\n      newListText: '',\n      creatingNewList: false,\n      openMenuId: null,\n    };\n\n    // TODO: Bind your class methods here\n    // ...\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to fetch data and init the component state.\n  // Tips:\n  // - Use the `this.setState` method to update the component state\n  componentDidMount() {}\n\n  // TODO: implement the handleAddList method to add a new list to the board.\n  // Tips:\n  // - Check if the list title is not an empty string. Do not create the list otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Add the new list\n  // - Use the `this.setState` method to update the state (lists, listOrder, newListText, creatingNewList)\n  // - Reset the `newListText` and `creatingNewList` state values as well to cleanup and close the form\n  handleAddList(title = '') {}\n\n  // TODO: implement the handleRemoveList method to remove a list from the board.\n  // Tips:\n  // - Delete all cards from the list\n  // - Delete list itself\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder)\n  handleRemoveList(listId) {}\n\n  // TODO: implement the handleAddCard method to add a card to a list.\n  // Tips:\n  // - Check if the card description is not an empty string. Do not create the card otherwise\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add the new card\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleAddCard(listId, description = '') {}\n\n  // TODO: implement the handleRemoveCard method to remove a card from a list.\n  // Tips:\n  // - Delete card\n  // - Remove card Id from the corresponding list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleRemoveCard(listId, cardId) {}\n\n  // TODO: implement the handleRemoveAllCards method to remove all cards from a list.\n  // Tips:\n  // - Delete all cards from the corresponding list\n  // - Remove card Ids from the list\n  // - Use the `this.setState` method to update the state (lists, cards, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleRemoveAllCards(listId) {}\n\n  // TODO: implement the handleCopyCard method to copy a card from a list to another.\n  // Tips:\n  // - Create card copy\n  // - Use the `_generateId` function to generate a unique Id for the new card\n  // - Use the `_getNextNumber` function to get the new card number\n  // - Add it to the list\n  // - Use the `this.setState` method to update the state (lists, cards)\n  handleCopyCard(listId, cardId) {}\n\n  // TODO: implement the handleCopyList method to clone an entire list.\n  // Tips:\n  // - Copy all cards from list to clone\n  // - Use the `_generateId` function to generate a unique Id for every cloned cards\n  // - Use the `_getNextNumber` function to get a new card number for every cloned cards\n  // - Create a new list and add all the cloned cards\n  // - Use the `_generateId` function to generate a unique Id for the new list\n  // - Edit the new list title to append '(Copy) - ' to it\n  // - Use the `this.setState` method to update the state (lists, cards, listOrder, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleCopyList(listId) {}\n\n  // TODO: implement the handleMoveAllCards method to move all cards to a list.\n  // Tips:\n  // - Update all the lists\n  // - The target list should get all the cards. The other lists should be emptied\n  // - Use the `this.setState` method to update the state (lists, openMenuId)\n  // - Close the opened menu by reseting the openMenuId state value\n  handleMoveAllCards(listId) {}\n\n  // TODO: implement the handleToggleMenu method to toggle the corresponding list menu.\n  // Tips:\n  // - Use the `this.setState` method to update the state (openMenuId)\n  handleToggleMenu(listId) {}\n\n  // TODO: implement the handleEditCard method to update the card description.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleEditCard(cardId, description = '') {}\n\n  // TODO: implement the handleRemoveTag method to remove a tag from a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleRemoveTag(cardId, tagId) {}\n\n  // TODO: implement the handleAddTag method to add a tag to a card.\n  // Tips:\n  // - Use the `this.setState` method to update the state (cards)\n  handleAddTag(cardId, text = '') {}\n\n  // [BONUS]: implement the handleDragEnd method to persist list and card reordering\n  // Tips:\n  // - Check if the element has been dropped inside the droppable context (using destination). If not, ignore droppping\n  // - Check if the element has been dropped in a new location (using droppableId from destination and source). If not, ignore droppping\n  // - Handle both type of draggable (list and card) by checking the value of type\n  // - Re-order cards inside the list if type equals 'card'. Use the `this.setState` method to update the state (lists)\n  // - Re-order lists inside the board if type equals 'list'. Use the `this.setState` method to update the state (listOrder)\n  handleDragEnd({ destination, source, draggableId, type }) {}\n\n  // TODO: implement the renderLists method to render the board lists UI.\n  // Tips:\n  // - Iterate through the listOrder state array to render each list of cards (CardsList)\n  // - Pass the necessary methods to the CardsList component to handle all actions\n  //\n  // [BONUS]:\n  // - Wrap the board lists inside the <Droppable> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n  // - Add the droppableId prop to it\n  // - Add the direction prop to it (should be 'horizontal')\n  // - Add the type prop to it (should be 'list')\n  // - Add the children function that returns your board lists component and bind everything together\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md#children-function\n  renderLists() {\n    return (\n      <div className=\"board-lists\">\n        { /* render the lists */ }\n      </div>\n    );\n  }\n\n  // TODO: implement the renderNewList method to render the list creation form.\n  // Tips:\n  // - Render a Form component in creation mode to let the user enter the new list title\n  // - Otherwise, render a button to trigger the creation mode (creatingNewList)\n  renderNewList() {}\n\n  // TODO: render the Board UI.\n  //\n  // [BONUS]:\n  // - Wrap the board inside the <DragDropContext> component\n  // --> https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/drag-drop-context.md\n  // - Add the onDragEnd prop to the <DragDropContext> component\n  render() {\n    return (\n      <div className=\"board\">\n        { /* render the lists */ }\n        { /* render the list creation form */ }\n      </div>\n    );\n  }\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}