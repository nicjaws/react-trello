{"ast":null,"code":"var _jsxFileName = \"/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Form.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // Icons\n\nimport { IoMdClose as CancelIcon } from 'react-icons/io'; // Components\n\nimport Button from './Button';\n/*\n * TODO: Create the Form component\n *\n * Requirements:\n * - Must be named Form\n * - Must be a class component\n * - Should implement all the methods defined below\n * - Should render a form element\n * - Should either render an input or a textarea element\n * - Should render a submit button\n * - Should render a cancel icon (optional)\n * \n * Tips:\n * - You can use the 'form' and 'form-*' CSS classes for styling\n * \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props); // Refs to access form and control input/textarea DOM nodes\n\n    this.formRef = /*#__PURE__*/React.createRef();\n    this.controlRef = /*#__PURE__*/React.createRef(); // TODO: Define your state properties here\n\n    this.state = {}; // TODO: Bind your class methods here\n    // ...\n  } // TODO: implement the componentDidMount lifecycle method to set focus on the form control element.\n  // Tips:\n  // - Call the `focus` method on the control ref node `this.controlRef.current`\n\n\n  componentDidMount() {} // TODO: implement the handleOnChangeText event handler.\n  // Tips:\n  // - Use the `this.setState` method to update the text value of the control from\n\n\n  handleOnChangeText(event) {} // TODO: implement the handleOnSubmit event handler.\n  // Tips:\n  // - Use the `preventDefault` method to prevent the default action\n  // - Call the `this.props.onClickSubmit` method to submit the text\n  // - Clean up the control form value using `this.setState`\n\n\n  handleOnSubmit(event) {} // TODO: implement the handleOnKeyDown event handler.\n  // Tips:\n  // - Use the `key` attribute from the event to check if the user has pressed \"Enter\" on the keyboard\n  // - Call the `this.handleOnSubmit` if the user pressed \"Enter\"\n\n\n  handleOnKeyDown(event) {} // TODO: render the Form UI.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      ref: this.formRef,\n      className: `form form-${this.props.type}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nForm.defaultProps = {\n  initialValue: '',\n  placeholder: '',\n  buttonText: '',\n  onClickSubmit: () => null,\n  onClickCancel: () => null\n};\nForm.propTypes = {\n  type: PropTypes.oneOf(['list', 'card', 'editor']).isRequired,\n  initialValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  buttonText: PropTypes.string,\n  onClickSubmit: PropTypes.func,\n  onClickCancel: PropTypes.func\n};\nexport default Form;","map":{"version":3,"sources":["/Users/nicjaws/Documents/GitHub/React/react-trello/src/components/Form.js"],"names":["React","Component","PropTypes","IoMdClose","CancelIcon","Button","Form","constructor","props","formRef","createRef","controlRef","state","componentDidMount","handleOnChangeText","event","handleOnSubmit","handleOnKeyDown","render","type","defaultProps","initialValue","placeholder","buttonText","onClickSubmit","onClickCancel","propTypes","oneOf","isRequired","string","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,SAAS,IAAIC,UAAtB,QAAwC,gBAAxC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAC3BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,OAAL,gBAAeT,KAAK,CAACU,SAAN,EAAf;AACA,SAAKC,UAAL,gBAAkBX,KAAK,CAACU,SAAN,EAAlB,CALiB,CAOjB;;AACA,SAAKE,KAAL,GAAa,EAAb,CARiB,CAUjB;AACA;AACD,GAb0B,CAe3B;AACA;AACA;;;AACAC,EAAAA,iBAAiB,GAAG,CAAE,CAlBK,CAoB3B;AACA;AACA;;;AACAC,EAAAA,kBAAkB,CAACC,KAAD,EAAQ,CAAE,CAvBD,CAyB3B;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,cAAc,CAACD,KAAD,EAAQ,CAAE,CA9BG,CAgC3B;AACA;AACA;AACA;;;AACAE,EAAAA,eAAe,CAACF,KAAD,EAAQ,CAAE,CApCE,CAsC3B;;;AACAG,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,GAAG,EAAE,KAAKT,OADZ;AAEE,MAAA,SAAS,EAAG,aAAY,KAAKD,KAAL,CAAWW,IAAK,EAF1C;AAAA,6BAKE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AApD0B;;AAqD5B;AAEDb,IAAI,CAACc,YAAL,GAAoB;AAClBC,EAAAA,YAAY,EAAE,EADI;AAElBC,EAAAA,WAAW,EAAE,EAFK;AAGlBC,EAAAA,UAAU,EAAE,EAHM;AAIlBC,EAAAA,aAAa,EAAE,MAAM,IAJH;AAKlBC,EAAAA,aAAa,EAAE,MAAM;AALH,CAApB;AAQAnB,IAAI,CAACoB,SAAL,GAAiB;AACfP,EAAAA,IAAI,EAAEjB,SAAS,CAACyB,KAAV,CAAgB,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,CAAhB,EAA4CC,UADnC;AAEfP,EAAAA,YAAY,EAAEnB,SAAS,CAAC2B,MAFT;AAGfP,EAAAA,WAAW,EAAEpB,SAAS,CAAC2B,MAHR;AAIfN,EAAAA,UAAU,EAAErB,SAAS,CAAC2B,MAJP;AAKfL,EAAAA,aAAa,EAAEtB,SAAS,CAAC4B,IALV;AAMfL,EAAAA,aAAa,EAAEvB,SAAS,CAAC4B;AANV,CAAjB;AASA,eAAexB,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Icons\nimport { IoMdClose as CancelIcon } from 'react-icons/io';\n// Components\nimport Button from './Button';\n\n/*\n * TODO: Create the Form component\n *\n * Requirements:\n * - Must be named Form\n * - Must be a class component\n * - Should implement all the methods defined below\n * - Should render a form element\n * - Should either render an input or a textarea element\n * - Should render a submit button\n * - Should render a cancel icon (optional)\n * \n * Tips:\n * - You can use the 'form' and 'form-*' CSS classes for styling\n * \n */ \nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    // Refs to access form and control input/textarea DOM nodes\n    this.formRef = React.createRef();\n    this.controlRef = React.createRef();\n\n    // TODO: Define your state properties here\n    this.state = {}\n\n    // TODO: Bind your class methods here\n    // ...\n  }\n\n  // TODO: implement the componentDidMount lifecycle method to set focus on the form control element.\n  // Tips:\n  // - Call the `focus` method on the control ref node `this.controlRef.current`\n  componentDidMount() {}\n\n  // TODO: implement the handleOnChangeText event handler.\n  // Tips:\n  // - Use the `this.setState` method to update the text value of the control from\n  handleOnChangeText(event) {}\n\n  // TODO: implement the handleOnSubmit event handler.\n  // Tips:\n  // - Use the `preventDefault` method to prevent the default action\n  // - Call the `this.props.onClickSubmit` method to submit the text\n  // - Clean up the control form value using `this.setState`\n  handleOnSubmit(event) {}\n\n  // TODO: implement the handleOnKeyDown event handler.\n  // Tips:\n  // - Use the `key` attribute from the event to check if the user has pressed \"Enter\" on the keyboard\n  // - Call the `this.handleOnSubmit` if the user pressed \"Enter\"\n  handleOnKeyDown(event) {}\n\n  // TODO: render the Form UI.\n  render() {\n    return (\n      <form\n        ref={this.formRef}\n        className={`form form-${this.props.type}`}\n      >\n        { /* render form control: input or textarea */ } \n        <div className=\"form-actions\">\n          { /* render submit button */ }\n          { /* render cancel icon */ }\n        </div>\n      </form>\n    );\n  }\n};\n\nForm.defaultProps = {\n  initialValue: '',\n  placeholder: '',\n  buttonText: '',\n  onClickSubmit: () => null,\n  onClickCancel: () => null\n};\n\nForm.propTypes = {\n  type: PropTypes.oneOf(['list', 'card', 'editor']).isRequired,\n  initialValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  buttonText: PropTypes.string,\n  onClickSubmit: PropTypes.func,\n  onClickCancel: PropTypes.func\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}